<?xml version="1.0" encoding="utf-8" ?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 1.3
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">1.3</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1">this is my long string</data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        [base64 mime encoded serialized .NET Framework object]
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        [base64 mime encoded string representing a byte array form of the .NET Framework object]
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used forserialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="lblTemplateHeading.Text">
		<value>Single Sign On Setup</value>
	</data>
	
	
	<data name="lnkSave.Text">
		<value>Save</value>
	</data>
	<data name="lnkBack.Text">
		<value>Back</value>
	</data>
	<data name="lblAlreadyAdded.Text">
		<value>Already Added Property Types</value>
	</data>

	<data name="lblEnableSingleSignOn.Text">
		<value>Enable Single Sign On</value>
	</data>

	<data name="lblEnableSignleSignOn.Help">
		<value>Check this box if you would like to enable single sign on within this portal.</value>
	</data>


<data name="lblMasterPortal.Text">
		<value>Master Portal</value>
	</data>

	<data name="lblMasterPortal.Help">
		<value>Select the master portal that you would like to setup for single sign on.</value>
	</data>


<data name="lblUserExistsOnChild.Text">
		<value>Add user to parent portal if user logs in and is not part of parent portal?</value>
	</data>

	<data name="lblUserExistsOnChild.Help">
		<value>Select this option if you would like to add the user to the parent portal if they are a registered user within the child portal but do not exist within the parent portal.</value>
	</data>


        <data name="lblSyncUserRoles.Text">
		<value>Sync User Roles from Parent Portal for each Login?</value>
	</data>

	<data name="lblSyncUserRoles.Help">
		<value>Select this option if you would like the users security roles to always be synced with the master portal. If this feature is not enabled then the roles will only initially be added for the user on the child portal for the very first login. When this feature is enabled the roles will be synced from the master portal for each and every login. </value>
	</data>



	<data name="litSSO.Text">
		<value>Select below if you would like to enable the single sign on feature within Dynamic Login. Single Sign On offers the ability to add the user to the current portal if the same username and password is valid within the master portal. For example, if a user with the username UserABC with a password of testing1 is registered within a parent portal or other portal on the DNN installation, attempting to login with these credentials will automatically authorize the user to access with this portal. Single Sign On will also automatically add the user to security roles within the portal if they have the same security role within the master portal. This comparison is completed per security role name. If you have a security role called 'My Security Role' within the master portal and another security role setup for the current portal with the same name 'My Security Role' the user will be added to this security role.  </value>
	</data>

 


<data name="ControlTitle_managelogintemplate.Text">
		<value>Setup Single Sign On</value>
	</data>




</root>